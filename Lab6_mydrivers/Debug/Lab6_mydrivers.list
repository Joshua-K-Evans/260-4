
Lab6_mydrivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000490  08000184  08000184  00001184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000614  0800061c  0000161c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000614  08000614  0000161c  2**0
                  CONTENTS
  4 .ARM          00000000  08000614  08000614  0000161c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000614  0800061c  0000161c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000614  08000614  00001614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000618  08000618  00001618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  0000161c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  0000161c  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000161c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000044c  00000000  00000000  0000164c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000244  00000000  00000000  00001a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000a0  00000000  00000000  00001ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000006b  00000000  00000000  00001d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000010a9  00000000  00000000  00001deb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000a4b  00000000  00000000  00002e94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00003f72  00000000  00000000  000038df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00007851  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000194  00000000  00000000  00007894  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  00007a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	@ (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	@ (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	20000000 	.word	0x20000000
 80001a0:	00000000 	.word	0x00000000
 80001a4:	080005fc 	.word	0x080005fc

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	@ (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	@ (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	@ (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000004 	.word	0x20000004
 80001c0:	080005fc 	.word	0x080005fc

080001c4 <GPIO_Mode>:
// function defintions (aka implementations)
#include "drivers.h"
 void GPIO_Mode(Port* GPIOx, uint32_t pin, uint32_t mode){
 80001c4:	b480      	push	{r7}
 80001c6:	b087      	sub	sp, #28
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	60f8      	str	r0, [r7, #12]
 80001cc:	60b9      	str	r1, [r7, #8]
 80001ce:	607a      	str	r2, [r7, #4]

	 if (mode == GPIO_MODE_INPUT){
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	2b00      	cmp	r3, #0
 80001d4:	d10b      	bne.n	80001ee <GPIO_Mode+0x2a>
		 GPIOx->MODER &= ~BITPAIR(pin);
 80001d6:	68fb      	ldr	r3, [r7, #12]
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	68ba      	ldr	r2, [r7, #8]
 80001dc:	0052      	lsls	r2, r2, #1
 80001de:	2103      	movs	r1, #3
 80001e0:	fa01 f202 	lsl.w	r2, r1, r2
 80001e4:	43d2      	mvns	r2, r2
 80001e6:	401a      	ands	r2, r3
 80001e8:	68fb      	ldr	r3, [r7, #12]
 80001ea:	601a      	str	r2, [r3, #0]
		uint32_t temp = GPIOx ->MODER;
		temp |= LBIT(pin); 	// reset the lower bits
		temp &= ~UBIT(pin);	// set the upper bits
		GPIOx->MODER = temp;		//start MODER
	 }
 }
 80001ec:	e01b      	b.n	8000226 <GPIO_Mode+0x62>
	 } else if (mode == GPIO_MODE_OUTPUT){
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	2b01      	cmp	r3, #1
 80001f2:	d118      	bne.n	8000226 <GPIO_Mode+0x62>
		uint32_t temp = GPIOx ->MODER;
 80001f4:	68fb      	ldr	r3, [r7, #12]
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	617b      	str	r3, [r7, #20]
		temp |= LBIT(pin); 	// reset the lower bits
 80001fa:	68bb      	ldr	r3, [r7, #8]
 80001fc:	005b      	lsls	r3, r3, #1
 80001fe:	2201      	movs	r2, #1
 8000200:	fa02 f303 	lsl.w	r3, r2, r3
 8000204:	461a      	mov	r2, r3
 8000206:	697b      	ldr	r3, [r7, #20]
 8000208:	4313      	orrs	r3, r2
 800020a:	617b      	str	r3, [r7, #20]
		temp &= ~UBIT(pin);	// set the upper bits
 800020c:	68bb      	ldr	r3, [r7, #8]
 800020e:	005b      	lsls	r3, r3, #1
 8000210:	2202      	movs	r2, #2
 8000212:	fa02 f303 	lsl.w	r3, r2, r3
 8000216:	43db      	mvns	r3, r3
 8000218:	461a      	mov	r2, r3
 800021a:	697b      	ldr	r3, [r7, #20]
 800021c:	4013      	ands	r3, r2
 800021e:	617b      	str	r3, [r7, #20]
		GPIOx->MODER = temp;		//start MODER
 8000220:	68fb      	ldr	r3, [r7, #12]
 8000222:	697a      	ldr	r2, [r7, #20]
 8000224:	601a      	str	r2, [r3, #0]
 }
 8000226:	bf00      	nop
 8000228:	371c      	adds	r7, #28
 800022a:	46bd      	mov	sp, r7
 800022c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000230:	4770      	bx	lr
	...

08000234 <GPIOA_ClkEnable>:

 void GPIOA_ClkEnable(void){
 8000234:	b480      	push	{r7}
 8000236:	af00      	add	r7, sp, #0
	 *AHB2ENR |= 0b001; // set bit 0 for Port A
 8000238:	4b05      	ldr	r3, [pc, #20]	@ (8000250 <GPIOA_ClkEnable+0x1c>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a04      	ldr	r2, [pc, #16]	@ (8000250 <GPIOA_ClkEnable+0x1c>)
 800023e:	f043 0301 	orr.w	r3, r3, #1
 8000242:	6013      	str	r3, [r2, #0]
 }
 8000244:	bf00      	nop
 8000246:	46bd      	mov	sp, r7
 8000248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop
 8000250:	4002104c 	.word	0x4002104c

08000254 <GPIOB_ClkEnable>:

 void GPIOB_ClkEnable(void){
 8000254:	b480      	push	{r7}
 8000256:	af00      	add	r7, sp, #0
 	 *AHB2ENR |= 0b010; // set bit 1 for Port B
 8000258:	4b05      	ldr	r3, [pc, #20]	@ (8000270 <GPIOB_ClkEnable+0x1c>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	4a04      	ldr	r2, [pc, #16]	@ (8000270 <GPIOB_ClkEnable+0x1c>)
 800025e:	f043 0302 	orr.w	r3, r3, #2
 8000262:	6013      	str	r3, [r2, #0]
  }
 8000264:	bf00      	nop
 8000266:	46bd      	mov	sp, r7
 8000268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	4002104c 	.word	0x4002104c

08000274 <GPIOC_ClkEnable>:

 void GPIOC_ClkEnable(void){
 8000274:	b480      	push	{r7}
 8000276:	af00      	add	r7, sp, #0
 	 *AHB2ENR |= 0b100; // set bit 2 for Port C
 8000278:	4b05      	ldr	r3, [pc, #20]	@ (8000290 <GPIOC_ClkEnable+0x1c>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4a04      	ldr	r2, [pc, #16]	@ (8000290 <GPIOC_ClkEnable+0x1c>)
 800027e:	f043 0304 	orr.w	r3, r3, #4
 8000282:	6013      	str	r3, [r2, #0]
  }
 8000284:	bf00      	nop
 8000286:	46bd      	mov	sp, r7
 8000288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop
 8000290:	4002104c 	.word	0x4002104c

08000294 <GPIO_Pull>:

 void GPIO_Pull(Port* GPIOx, uint32_t pin, uint32_t pull){
 8000294:	b480      	push	{r7}
 8000296:	b087      	sub	sp, #28
 8000298:	af00      	add	r7, sp, #0
 800029a:	60f8      	str	r0, [r7, #12]
 800029c:	60b9      	str	r1, [r7, #8]
 800029e:	607a      	str	r2, [r7, #4]
	 if (pull == GPIO_NOPULL){
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d10b      	bne.n	80002be <GPIO_Pull+0x2a>
		 GPIOx->PUPDR &= ~BITPAIR(pin);// set null
 80002a6:	68fb      	ldr	r3, [r7, #12]
 80002a8:	68db      	ldr	r3, [r3, #12]
 80002aa:	68ba      	ldr	r2, [r7, #8]
 80002ac:	0052      	lsls	r2, r2, #1
 80002ae:	2103      	movs	r1, #3
 80002b0:	fa01 f202 	lsl.w	r2, r1, r2
 80002b4:	43d2      	mvns	r2, r2
 80002b6:	401a      	ands	r2, r3
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	60da      	str	r2, [r3, #12]
			uint32_t temp = GPIOx->PUPDR; 	// read PUPDR
			temp &= ~BITPAIR(pin);		// set the lower bit
			temp |= UBIT(pin); 			// set the upper bit
			GPIOx->PUPDR = temp;			// store PUPDR
	}
 }
 80002bc:	e038      	b.n	8000330 <GPIO_Pull+0x9c>
	 }  else if (pull == GPIO_PULLUP) {
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	2b01      	cmp	r3, #1
 80002c2:	d119      	bne.n	80002f8 <GPIO_Pull+0x64>
			uint32_t temp = GPIOx->PUPDR; 	// read PUPDR
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	68db      	ldr	r3, [r3, #12]
 80002c8:	613b      	str	r3, [r7, #16]
			temp |=  LBIT(pin);		// set the lower bit
 80002ca:	68bb      	ldr	r3, [r7, #8]
 80002cc:	005b      	lsls	r3, r3, #1
 80002ce:	2201      	movs	r2, #1
 80002d0:	fa02 f303 	lsl.w	r3, r2, r3
 80002d4:	461a      	mov	r2, r3
 80002d6:	693b      	ldr	r3, [r7, #16]
 80002d8:	4313      	orrs	r3, r2
 80002da:	613b      	str	r3, [r7, #16]
			temp &= ~UBIT(pin); 	// set the upper bit
 80002dc:	68bb      	ldr	r3, [r7, #8]
 80002de:	005b      	lsls	r3, r3, #1
 80002e0:	2202      	movs	r2, #2
 80002e2:	fa02 f303 	lsl.w	r3, r2, r3
 80002e6:	43db      	mvns	r3, r3
 80002e8:	461a      	mov	r2, r3
 80002ea:	693b      	ldr	r3, [r7, #16]
 80002ec:	4013      	ands	r3, r2
 80002ee:	613b      	str	r3, [r7, #16]
			GPIOx->PUPDR = temp;			// store PUPDR
 80002f0:	68fb      	ldr	r3, [r7, #12]
 80002f2:	693a      	ldr	r2, [r7, #16]
 80002f4:	60da      	str	r2, [r3, #12]
 }
 80002f6:	e01b      	b.n	8000330 <GPIO_Pull+0x9c>
		} else if (pull == GPIO_PULLDOWN) {
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	2b02      	cmp	r3, #2
 80002fc:	d118      	bne.n	8000330 <GPIO_Pull+0x9c>
			uint32_t temp = GPIOx->PUPDR; 	// read PUPDR
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	68db      	ldr	r3, [r3, #12]
 8000302:	617b      	str	r3, [r7, #20]
			temp &= ~BITPAIR(pin);		// set the lower bit
 8000304:	68bb      	ldr	r3, [r7, #8]
 8000306:	005b      	lsls	r3, r3, #1
 8000308:	2203      	movs	r2, #3
 800030a:	fa02 f303 	lsl.w	r3, r2, r3
 800030e:	43db      	mvns	r3, r3
 8000310:	461a      	mov	r2, r3
 8000312:	697b      	ldr	r3, [r7, #20]
 8000314:	4013      	ands	r3, r2
 8000316:	617b      	str	r3, [r7, #20]
			temp |= UBIT(pin); 			// set the upper bit
 8000318:	68bb      	ldr	r3, [r7, #8]
 800031a:	005b      	lsls	r3, r3, #1
 800031c:	2202      	movs	r2, #2
 800031e:	fa02 f303 	lsl.w	r3, r2, r3
 8000322:	461a      	mov	r2, r3
 8000324:	697b      	ldr	r3, [r7, #20]
 8000326:	4313      	orrs	r3, r2
 8000328:	617b      	str	r3, [r7, #20]
			GPIOx->PUPDR = temp;			// store PUPDR
 800032a:	68fb      	ldr	r3, [r7, #12]
 800032c:	697a      	ldr	r2, [r7, #20]
 800032e:	60da      	str	r2, [r3, #12]
 }
 8000330:	bf00      	nop
 8000332:	371c      	adds	r7, #28
 8000334:	46bd      	mov	sp, r7
 8000336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033a:	4770      	bx	lr

0800033c <GPIO_WritePin>:

 void GPIO_TogglePin(Port* GPIOx, uint32_t pin){
	 GPIOx->ODR ^= BITMASK(pin);
 }
 void GPIO_WritePin(Port* GPIOx, uint32_t pin, uint32_t state){
 800033c:	b480      	push	{r7}
 800033e:	b085      	sub	sp, #20
 8000340:	af00      	add	r7, sp, #0
 8000342:	60f8      	str	r0, [r7, #12]
 8000344:	60b9      	str	r1, [r7, #8]
 8000346:	607a      	str	r2, [r7, #4]
	 if(state != 0){
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	2b00      	cmp	r3, #0
 800034c:	d009      	beq.n	8000362 <GPIO_WritePin+0x26>
		 GPIOx->ODR |= BITMASK(pin);
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	695b      	ldr	r3, [r3, #20]
 8000352:	2101      	movs	r1, #1
 8000354:	68ba      	ldr	r2, [r7, #8]
 8000356:	fa01 f202 	lsl.w	r2, r1, r2
 800035a:	431a      	orrs	r2, r3
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	615a      	str	r2, [r3, #20]
	 }else{
		 GPIOx->ODR &= ~BITMASK(pin);
	 }
 }
 8000360:	e009      	b.n	8000376 <GPIO_WritePin+0x3a>
		 GPIOx->ODR &= ~BITMASK(pin);
 8000362:	68fb      	ldr	r3, [r7, #12]
 8000364:	695b      	ldr	r3, [r3, #20]
 8000366:	2101      	movs	r1, #1
 8000368:	68ba      	ldr	r2, [r7, #8]
 800036a:	fa01 f202 	lsl.w	r2, r1, r2
 800036e:	43d2      	mvns	r2, r2
 8000370:	401a      	ands	r2, r3
 8000372:	68fb      	ldr	r3, [r7, #12]
 8000374:	615a      	str	r2, [r3, #20]
 }
 8000376:	bf00      	nop
 8000378:	3714      	adds	r7, #20
 800037a:	46bd      	mov	sp, r7
 800037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000380:	4770      	bx	lr

08000382 <GPIO_ReadPin>:

 uint32_t GPIO_ReadPin(Port* GPIOx, uint32_t pin){
 8000382:	b480      	push	{r7}
 8000384:	b085      	sub	sp, #20
 8000386:	af00      	add	r7, sp, #0
 8000388:	6078      	str	r0, [r7, #4]
 800038a:	6039      	str	r1, [r7, #0]
	 uint32_t value = 0;
 800038c:	2300      	movs	r3, #0
 800038e:	60fb      	str	r3, [r7, #12]
	 if((GPIOx->IDR & (BITMASK(pin))) != 0){
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	691b      	ldr	r3, [r3, #16]
 8000394:	2101      	movs	r1, #1
 8000396:	683a      	ldr	r2, [r7, #0]
 8000398:	fa01 f202 	lsl.w	r2, r1, r2
 800039c:	4013      	ands	r3, r2
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d002      	beq.n	80003a8 <GPIO_ReadPin+0x26>
		 value = 1;
 80003a2:	2301      	movs	r3, #1
 80003a4:	60fb      	str	r3, [r7, #12]
 80003a6:	e001      	b.n	80003ac <GPIO_ReadPin+0x2a>
	 }else {
		 value = 0;
 80003a8:	2300      	movs	r3, #0
 80003aa:	60fb      	str	r3, [r7, #12]
	 }
 return value;
 80003ac:	68fb      	ldr	r3, [r7, #12]
}
 80003ae:	4618      	mov	r0, r3
 80003b0:	3714      	adds	r7, #20
 80003b2:	46bd      	mov	sp, r7
 80003b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b8:	4770      	bx	lr
	...

080003bc <main>:
#define WINDOW_ALARM_PORT GPIOA
#define WINDOW_ALARM_PIN  9

// This program adapts the alarm code from Lab 5 for use in Lab 6 with drivers
int main(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
    // Turn on GPIO clocks (Ports A, B, and C)
    GPIOA_ClkEnable();
 80003c2:	f7ff ff37 	bl	8000234 <GPIOA_ClkEnable>
    GPIOB_ClkEnable();
 80003c6:	f7ff ff45 	bl	8000254 <GPIOB_ClkEnable>
    GPIOC_ClkEnable();
 80003ca:	f7ff ff53 	bl	8000274 <GPIOC_ClkEnable>

    // Configure button pins as inputs
    GPIO_Mode(ARM_BUTTON_PORT,    ARM_BUTTON_PIN,    GPIO_MODE_INPUT);
 80003ce:	2200      	movs	r2, #0
 80003d0:	210d      	movs	r1, #13
 80003d2:	4862      	ldr	r0, [pc, #392]	@ (800055c <main+0x1a0>)
 80003d4:	f7ff fef6 	bl	80001c4 <GPIO_Mode>
    GPIO_Mode(DISARM_BUTTON_PORT, DISARM_BUTTON_PIN, GPIO_MODE_INPUT);
 80003d8:	2200      	movs	r2, #0
 80003da:	2100      	movs	r1, #0
 80003dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003e0:	f7ff fef0 	bl	80001c4 <GPIO_Mode>

    // Configure reed switch pins as inputs
    GPIO_Mode(FRONT_SENSOR_PORT,  FRONT_SENSOR_PIN,  GPIO_MODE_INPUT);
 80003e4:	2200      	movs	r2, #0
 80003e6:	2101      	movs	r1, #1
 80003e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003ec:	f7ff feea 	bl	80001c4 <GPIO_Mode>
    GPIO_Mode(BACK_SENSOR_PORT,   BACK_SENSOR_PIN,   GPIO_MODE_INPUT);
 80003f0:	2200      	movs	r2, #0
 80003f2:	2104      	movs	r1, #4
 80003f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003f8:	f7ff fee4 	bl	80001c4 <GPIO_Mode>
    GPIO_Mode(WINDOW_SENSOR_PORT, WINDOW_SENSOR_PIN, GPIO_MODE_INPUT);
 80003fc:	2200      	movs	r2, #0
 80003fe:	2106      	movs	r1, #6
 8000400:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000404:	f7ff fede 	bl	80001c4 <GPIO_Mode>

    // Configure LED pins as outputs
    GPIO_Mode(ARM_STATUS_PORT,   ARM_STATUS_PIN,   GPIO_MODE_OUTPUT);
 8000408:	2201      	movs	r2, #1
 800040a:	2105      	movs	r1, #5
 800040c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000410:	f7ff fed8 	bl	80001c4 <GPIO_Mode>
    GPIO_Mode(FRONT_ALARM_PORT,  FRONT_ALARM_PIN,  GPIO_MODE_OUTPUT);
 8000414:	2201      	movs	r2, #1
 8000416:	2107      	movs	r1, #7
 8000418:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800041c:	f7ff fed2 	bl	80001c4 <GPIO_Mode>
    GPIO_Mode(BACK_ALARM_PORT,   BACK_ALARM_PIN,   GPIO_MODE_OUTPUT);
 8000420:	2201      	movs	r2, #1
 8000422:	2108      	movs	r1, #8
 8000424:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000428:	f7ff fecc 	bl	80001c4 <GPIO_Mode>
    GPIO_Mode(WINDOW_ALARM_PORT, WINDOW_ALARM_PIN, GPIO_MODE_OUTPUT);
 800042c:	2201      	movs	r2, #1
 800042e:	2109      	movs	r1, #9
 8000430:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000434:	f7ff fec6 	bl	80001c4 <GPIO_Mode>

    // Enable pull-up resistors for inputs
    GPIO_Pull(DISARM_BUTTON_PORT, DISARM_BUTTON_PIN, GPIO_PULLUP);
 8000438:	2201      	movs	r2, #1
 800043a:	2100      	movs	r1, #0
 800043c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000440:	f7ff ff28 	bl	8000294 <GPIO_Pull>
    GPIO_Pull(FRONT_SENSOR_PORT,  FRONT_SENSOR_PIN,  GPIO_PULLUP);
 8000444:	2201      	movs	r2, #1
 8000446:	2101      	movs	r1, #1
 8000448:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800044c:	f7ff ff22 	bl	8000294 <GPIO_Pull>
    GPIO_Pull(BACK_SENSOR_PORT,   BACK_SENSOR_PIN,   GPIO_PULLUP);
 8000450:	2201      	movs	r2, #1
 8000452:	2104      	movs	r1, #4
 8000454:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000458:	f7ff ff1c 	bl	8000294 <GPIO_Pull>
    GPIO_Pull(WINDOW_SENSOR_PORT, WINDOW_SENSOR_PIN, GPIO_PULLUP);
 800045c:	2201      	movs	r2, #1
 800045e:	2106      	movs	r1, #6
 8000460:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000464:	f7ff ff16 	bl	8000294 <GPIO_Pull>

    // Initialize Alarm Status (turn off all LEDs)
    GPIO_WritePin(ARM_STATUS_PORT,   ARM_STATUS_PIN,   0);
 8000468:	2200      	movs	r2, #0
 800046a:	2105      	movs	r1, #5
 800046c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000470:	f7ff ff64 	bl	800033c <GPIO_WritePin>
    GPIO_WritePin(FRONT_ALARM_PORT,  FRONT_ALARM_PIN,  0);
 8000474:	2200      	movs	r2, #0
 8000476:	2107      	movs	r1, #7
 8000478:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800047c:	f7ff ff5e 	bl	800033c <GPIO_WritePin>
    GPIO_WritePin(BACK_ALARM_PORT,   BACK_ALARM_PIN,   0);
 8000480:	2200      	movs	r2, #0
 8000482:	2108      	movs	r1, #8
 8000484:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000488:	f7ff ff58 	bl	800033c <GPIO_WritePin>
    GPIO_WritePin(WINDOW_ALARM_PORT, WINDOW_ALARM_PIN, 0);
 800048c:	2200      	movs	r2, #0
 800048e:	2109      	movs	r1, #9
 8000490:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000494:	f7ff ff52 	bl	800033c <GPIO_WritePin>

    // armed state (initialize to disarm)
    int armed = 0;
 8000498:	2300      	movs	r3, #0
 800049a:	607b      	str	r3, [r7, #4]

    // infinite loop
    while(1){

        // check if ArmButton is pressed
        if (GPIO_ReadPin(ARM_BUTTON_PORT, ARM_BUTTON_PIN) == 0){
 800049c:	210d      	movs	r1, #13
 800049e:	482f      	ldr	r0, [pc, #188]	@ (800055c <main+0x1a0>)
 80004a0:	f7ff ff6f 	bl	8000382 <GPIO_ReadPin>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d107      	bne.n	80004ba <main+0xfe>

            // arm system
            armed = 1; // set arm state
 80004aa:	2301      	movs	r3, #1
 80004ac:	607b      	str	r3, [r7, #4]
            GPIO_WritePin(ARM_STATUS_PORT, ARM_STATUS_PIN, 1); // turn on ArmStatus LED
 80004ae:	2201      	movs	r2, #1
 80004b0:	2105      	movs	r1, #5
 80004b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004b6:	f7ff ff41 	bl	800033c <GPIO_WritePin>
        }

        // check if DisarmButton is pressed
        if (GPIO_ReadPin(DISARM_BUTTON_PORT, DISARM_BUTTON_PIN) == 0){
 80004ba:	2100      	movs	r1, #0
 80004bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004c0:	f7ff ff5f 	bl	8000382 <GPIO_ReadPin>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d119      	bne.n	80004fe <main+0x142>

            // disarm system
            armed = 0; // reset arm state
 80004ca:	2300      	movs	r3, #0
 80004cc:	607b      	str	r3, [r7, #4]
            GPIO_WritePin(ARM_STATUS_PORT,   ARM_STATUS_PIN,   0); // turn off ArmStatus LED
 80004ce:	2200      	movs	r2, #0
 80004d0:	2105      	movs	r1, #5
 80004d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004d6:	f7ff ff31 	bl	800033c <GPIO_WritePin>
            GPIO_WritePin(FRONT_ALARM_PORT,  FRONT_ALARM_PIN,  0); // turn off FrontAlarm LED
 80004da:	2200      	movs	r2, #0
 80004dc:	2107      	movs	r1, #7
 80004de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004e2:	f7ff ff2b 	bl	800033c <GPIO_WritePin>
            GPIO_WritePin(BACK_ALARM_PORT,   BACK_ALARM_PIN,   0); // turn off BackAlarm LED
 80004e6:	2200      	movs	r2, #0
 80004e8:	2108      	movs	r1, #8
 80004ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004ee:	f7ff ff25 	bl	800033c <GPIO_WritePin>
            GPIO_WritePin(WINDOW_ALARM_PORT, WINDOW_ALARM_PIN, 0); // turn off WindowAlarm LED
 80004f2:	2200      	movs	r2, #0
 80004f4:	2109      	movs	r1, #9
 80004f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004fa:	f7ff ff1f 	bl	800033c <GPIO_WritePin>
        }

        // if system is armed, check sensors
        if (armed){
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	2b00      	cmp	r3, #0
 8000502:	d0cb      	beq.n	800049c <main+0xe0>

            // check the FrontSensor
            if (GPIO_ReadPin(FRONT_SENSOR_PORT, FRONT_SENSOR_PIN) != 0){
 8000504:	2101      	movs	r1, #1
 8000506:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800050a:	f7ff ff3a 	bl	8000382 <GPIO_ReadPin>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d005      	beq.n	8000520 <main+0x164>

                // system armed & front door is open:
                GPIO_WritePin(FRONT_ALARM_PORT, FRONT_ALARM_PIN, 1); // turn on FrontAlarm LED
 8000514:	2201      	movs	r2, #1
 8000516:	2107      	movs	r1, #7
 8000518:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800051c:	f7ff ff0e 	bl	800033c <GPIO_WritePin>
            }

            // check the BackSensor
            if (GPIO_ReadPin(BACK_SENSOR_PORT, BACK_SENSOR_PIN) != 0){
 8000520:	2104      	movs	r1, #4
 8000522:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000526:	f7ff ff2c 	bl	8000382 <GPIO_ReadPin>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d005      	beq.n	800053c <main+0x180>

                // system armed & back door is open:
                GPIO_WritePin(BACK_ALARM_PORT, BACK_ALARM_PIN, 1); // turn off BackAlarm LED
 8000530:	2201      	movs	r2, #1
 8000532:	2108      	movs	r1, #8
 8000534:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000538:	f7ff ff00 	bl	800033c <GPIO_WritePin>
            }

            // check the WindowSensor
            if (GPIO_ReadPin(WINDOW_SENSOR_PORT, WINDOW_SENSOR_PIN) != 0){
 800053c:	2106      	movs	r1, #6
 800053e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000542:	f7ff ff1e 	bl	8000382 <GPIO_ReadPin>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d0a7      	beq.n	800049c <main+0xe0>

                // system armed & window is open:
                GPIO_WritePin(WINDOW_ALARM_PORT, WINDOW_ALARM_PIN, 1); // turn on WindowAlarm LED
 800054c:	2201      	movs	r2, #1
 800054e:	2109      	movs	r1, #9
 8000550:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000554:	f7ff fef2 	bl	800033c <GPIO_WritePin>
        if (GPIO_ReadPin(ARM_BUTTON_PORT, ARM_BUTTON_PIN) == 0){
 8000558:	e7a0      	b.n	800049c <main+0xe0>
 800055a:	bf00      	nop
 800055c:	48000800 	.word	0x48000800

08000560 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000560:	480d      	ldr	r0, [pc, #52]	@ (8000598 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000562:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000564:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000568:	480c      	ldr	r0, [pc, #48]	@ (800059c <LoopForever+0x6>)
  ldr r1, =_edata
 800056a:	490d      	ldr	r1, [pc, #52]	@ (80005a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800056c:	4a0d      	ldr	r2, [pc, #52]	@ (80005a4 <LoopForever+0xe>)
  movs r3, #0
 800056e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000570:	e002      	b.n	8000578 <LoopCopyDataInit>

08000572 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000572:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000574:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000576:	3304      	adds	r3, #4

08000578 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000578:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800057a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800057c:	d3f9      	bcc.n	8000572 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800057e:	4a0a      	ldr	r2, [pc, #40]	@ (80005a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000580:	4c0a      	ldr	r4, [pc, #40]	@ (80005ac <LoopForever+0x16>)
  movs r3, #0
 8000582:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000584:	e001      	b.n	800058a <LoopFillZerobss>

08000586 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000586:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000588:	3204      	adds	r2, #4

0800058a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800058a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800058c:	d3fb      	bcc.n	8000586 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800058e:	f000 f811 	bl	80005b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000592:	f7ff ff13 	bl	80003bc <main>

08000596 <LoopForever>:

LoopForever:
  b LoopForever
 8000596:	e7fe      	b.n	8000596 <LoopForever>
  ldr   r0, =_estack
 8000598:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800059c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005a0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80005a4:	0800061c 	.word	0x0800061c
  ldr r2, =_sbss
 80005a8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80005ac:	2000001c 	.word	0x2000001c

080005b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005b0:	e7fe      	b.n	80005b0 <ADC1_2_IRQHandler>
	...

080005b4 <__libc_init_array>:
 80005b4:	b570      	push	{r4, r5, r6, lr}
 80005b6:	4d0d      	ldr	r5, [pc, #52]	@ (80005ec <__libc_init_array+0x38>)
 80005b8:	4c0d      	ldr	r4, [pc, #52]	@ (80005f0 <__libc_init_array+0x3c>)
 80005ba:	1b64      	subs	r4, r4, r5
 80005bc:	10a4      	asrs	r4, r4, #2
 80005be:	2600      	movs	r6, #0
 80005c0:	42a6      	cmp	r6, r4
 80005c2:	d109      	bne.n	80005d8 <__libc_init_array+0x24>
 80005c4:	4d0b      	ldr	r5, [pc, #44]	@ (80005f4 <__libc_init_array+0x40>)
 80005c6:	4c0c      	ldr	r4, [pc, #48]	@ (80005f8 <__libc_init_array+0x44>)
 80005c8:	f000 f818 	bl	80005fc <_init>
 80005cc:	1b64      	subs	r4, r4, r5
 80005ce:	10a4      	asrs	r4, r4, #2
 80005d0:	2600      	movs	r6, #0
 80005d2:	42a6      	cmp	r6, r4
 80005d4:	d105      	bne.n	80005e2 <__libc_init_array+0x2e>
 80005d6:	bd70      	pop	{r4, r5, r6, pc}
 80005d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80005dc:	4798      	blx	r3
 80005de:	3601      	adds	r6, #1
 80005e0:	e7ee      	b.n	80005c0 <__libc_init_array+0xc>
 80005e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80005e6:	4798      	blx	r3
 80005e8:	3601      	adds	r6, #1
 80005ea:	e7f2      	b.n	80005d2 <__libc_init_array+0x1e>
 80005ec:	08000614 	.word	0x08000614
 80005f0:	08000614 	.word	0x08000614
 80005f4:	08000614 	.word	0x08000614
 80005f8:	08000618 	.word	0x08000618

080005fc <_init>:
 80005fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005fe:	bf00      	nop
 8000600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000602:	bc08      	pop	{r3}
 8000604:	469e      	mov	lr, r3
 8000606:	4770      	bx	lr

08000608 <_fini>:
 8000608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800060a:	bf00      	nop
 800060c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800060e:	bc08      	pop	{r3}
 8000610:	469e      	mov	lr, r3
 8000612:	4770      	bx	lr
